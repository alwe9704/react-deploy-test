{"version":3,"sources":["components/Monster/Monster.tsx","components/SearchField/SearchField.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Monster","name","className","src","alt","SearchField","handleChange","type","onChange","element","target","value","request","url","config","fetch","then","response","json","data","App","updateString","newString","setState","searchString","state","monsters","a","newMonsters","map","user","push","username","this","e","filter","monster","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAeeA,MARf,YAAkC,IAAhBC,EAAe,EAAfA,KACd,OACA,sBAAKC,UAAU,UAAf,UACI,qBAAKC,IAAG,8BAAyBF,EAAzB,aAA0CG,IAAI,KACtD,6BAAKH,Q,MCKEI,MATf,YACC,IADqBC,EACtB,EADsBA,aAElB,OACA,uBACIJ,UAAU,cACVK,KAAK,OACLC,SAAU,SAACC,GAAaH,EAAaG,EAAQC,OAAOC,WCK5D,SAASC,EACPC,GAMqB,IAHrBC,EAGoB,uDAHE,GAOtB,OAAOC,MAAMF,EAAKC,GAEfE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACG,GAAD,OAAUA,K,IAOdC,E,kDAEJ,aAAe,IAAD,8BACZ,cAAM,KAORC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,aAAcF,KARhB,EAAKG,MAAQ,CACXC,SAAU,GACVF,aAAc,IAJJ,E,4FAcd,8BAAAG,EAAA,sEACyBf,EAAgB,8CADzC,OACQK,EADR,OAEQW,EAAyB,GAC/BX,EAASY,KAAI,SAAAC,GACXF,EAAYG,KAAK,CAAC9B,KAAM6B,EAAKE,cAE/BC,KAAKV,SAAS,CAACG,SAAUE,IAN3B,gD,0EASA,WAAU,IAAD,OACP,OACE,sBAAK1B,UAAU,MAAf,UACE,6CACA,8BACE,cAAC,EAAD,CACEI,aAAc,SAAA4B,GAAC,OAAI,EAAKX,SAAS,CAACC,aAAcU,SAGpD,qBAAKhC,UAAU,eAAf,SAC2B,MAAvB+B,KAAKR,MAAMC,SACTO,KAAKR,MAAMC,SACRS,QAAO,SAAAC,GAAO,OAAIA,EAAQnC,KAAKoC,cAAcC,SAAS,EAAKb,MAAMD,aAAaa,kBAC9ER,KAAI,SAAAO,GACH,OAAO,cAAC,EAAD,CAELnC,KAAMmC,EAAQnC,MADTmC,EAAQnC,SAInB,iD,GA5CIsC,aAoDHnB,IC9EAoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fd9599b3.chunk.js","sourcesContent":["import React from 'react';\nimport './Monster.css';\n\ninterface Props {\n    name: string\n};\n\nfunction Monster({name} : Props) {\n    return (\n    <div className=\"monster\">\n        <img src={`http://robohash.org/${name}?set=set2`} alt=\"\"/>\n        <h2>{name}</h2>\n    </div>)\n}\n\nexport default Monster;\n","import React from 'react';\nimport './SearchField.css'\n\ninterface Props {\n    handleChange: (a1: string) => void, \n};\n\nfunction SearchField({handleChange} : Props)\n{\n    return (\n    <input \n        className=\"searchField\"\n        type=\"text\" \n        onChange={(element) => {handleChange(element.target.value as string);\n    }}/>)\n}\nexport default SearchField;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Monster from './components/Monster/Monster';\nimport SearchField from './components/SearchField/SearchField';\n\ninterface Monster {\n  name: string\n}\n\ninterface User {\n  id: number,\n  username: string,\n  email: string\n};\n\n// Make the `request` function generic\n// to specify the return data type:\nfunction request<TResponse>(\n  url: string,\n  // `RequestInit` is a type for configuring \n  // a `fetch` request. By default, an empty object.\n  config: RequestInit = {}\n   \n// This function is async, it will return a Promise:\n): Promise<TResponse> {\n    \n  // Inside, we call the `fetch` function with \n  // a URL and config given:\n  return fetch(url, config)\n    // When got a response call a `json` method on it\n    .then((response) => response.json())\n    // and return the result data.\n    .then((data) => data as TResponse);\n    \n    // We also can use some post-response\n    // data-transformations in the last `then` clause.\n}\n\n\nclass App extends Component<{}, {monsters: Monster[], searchString: string}> {\n  \n  constructor() {\n    super({});\n    this.state = {\n      monsters: [],\n      searchString: \"\"\n    };\n  }\n  \n  updateString = (newString: string) => {\n    this.setState({\n      searchString: newString\n    })\n  }\n\n  async componentDidMount() {\n    const response = await request<User[]>('https://jsonplaceholder.typicode.com/users');\n    const newMonsters: Monster[] = [];\n    response.map(user => {\n      newMonsters.push({name: user.username})\n    });\n    this.setState({monsters: newMonsters});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Monsterdeck</h1>\n        <div>\n          <SearchField \n            handleChange={e => this.setState({searchString: e})}\n          />\n        </div>\n        <div className=\"monster-grid\">\n          { this.state.monsters != null ? \n              this.state.monsters\n                .filter(monster => monster.name.toLowerCase().includes(this.state.searchString.toLowerCase()))\n                .map(monster => {\n                  return <Monster\n                    key={monster.name} \n                    name={monster.name} />\n                })\n              :\n              <div>Empty</div>              \n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}